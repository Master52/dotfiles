set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
"plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'flazz/vim-colorschemes'
Plugin 'javacomplete'
Plugin 'vimwiki/vimwiki'
Plugin 'potatoesmaster/i3-vim-syntax'
Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'joshdick/onedark.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
"
syntax on


" set UTF-8 encoding
 set enc=utf-8
 set fenc=utf-8
 set termencoding=utf-8
 set autoindent
 set relativenumber
 



"Nerd tree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

set number
set numberwidth=5
set so=10
set omnifunc=syntaxcomplete#Complete
setlocal omnifunc=javacomplete#Complete

"Basic Navigation
inoremap <Space><Space> <Esc>/<Enter>"_c4l
vnoremap <Space><Space> <Esc>/<++><Enter>"_c4l
map <Space><Space> <Esc>/<++><Enter>"_c4l
inoremap j;gui <++>
inoremap lenght length
inoremap widht width
inoremap heigth height
nnoremap <C-y> "+y
vnoremap <C-y> "+y
nnoremap <C-p> "+gP
nnoremap <C-p> "+gP

"For Normal mode
inoremap jw <Esc>
inoremap wj <Esc>:w<enter>

"Spell check
map <F7> :setlocal spell! spelllang=en_us<CR>
inoremap <C-l> <Space><Space>

"Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"Unmap the arrow keys
nmap<down>	:NERDTree<Enter>

nmap<left>	:tabprevious<Enter>   
nmap <right> :tabnext<Enter>
no<up> <Nop>

ino	<down>	<Nop>
ino	<left>	<Nop>
ino	<right>	<Nop>
ino	<up>	<Nop>

"LaTeX
autocmd Filetype tex setl updatetime=1
let g:livepreview_previewer = 'evince'
let g:livepreview_always_autosave = 1

 "____        _                  _
"/ ___| _ __ (_)_ __  _ __   ___| |_ ___
"\___ \| '_ \| | '_ \| '_ \ / _ \ __/ __|
 "___) | | | | | |_) | |_) |  __/ |_\__ \
"|____/|_| |_|_| .__/| .__/ \___|\__|___/
              "|_|   |_|

"""LATEX
	" Word count:
	autocmd FileType tex map <F3> :w !detex \| wc -w<CR>
	autocmd FileType tex inoremap <F3> <Esc>:w !detex \| wc -w<CR>
	" Compile document using xelatex:
	autocmd FileType tex inoremap <F5> <Esc>:!xelatex<space><c-r>%<Enter>a
	autocmd FileType tex nnoremap <F5> :!xelatex<space><c-r>%<Enter>
	" Code snippets
	autocmd FileType tex inoremap ;fr \begin{frame}<Enter>\frametitle{}<Enter><Enter><++><Enter><Enter>\end{frame}<Enter><Enter><++><Esc>6kf}i
	autocmd FileType tex inoremap ;fi \begin{fitch}<Enter><Enter>\end{fitch}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex inoremap ;exe \begin{exe}<Enter>\ex<Space><Enter>\end{exe}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex inoremap ;em \emph{}<++><Esc>T{i
	autocmd FileType tex inoremap ;bf \textbf{}<++><Esc>T{i
	autocmd FileType tex vnoremap ; <ESC>`<i\{<ESC>`>2la}<ESC>?\\{<Enter>a
	autocmd FileType tex inoremap ;it \textit{}<++><Esc>T{i
	autocmd FileType tex inoremap ;ct \textcite{}<++><Esc>T{i
	autocmd FileType tex inoremap ;cp \parencite{}<++><Esc>T{i
	autocmd FileType tex inoremap ;glos {\gll<Space><++><Space>\\<Enter><++><Space>\\<Enter>\trans{``<++>''}}<Esc>2k2bcw
	autocmd FileType tex inoremap ;x \begin{xlist}<Enter>\ex<Space><Enter>\end{xlist}<Esc>kA<Space>
	autocmd FileType tex inoremap ;ol \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ;ul \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ;li <Enter>\item<Space>
	autocmd FileType tex inoremap ;ref \ref{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ;tab \begin{tabular}<Enter><++><Enter>\end{tabular}<Enter><Enter><++><Esc>4kA{}<Esc>i
	autocmd FileType tex inoremap ;ot \begin{tableau}<Enter>\inp{<++>}<Tab>\const{<++>}<Tab><++><Enter><++><Enter>\end{tableau}<Enter><Enter><++><Esc>5kA{}<Esc>i
	autocmd FileType tex inoremap ;can \cand{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ;con \const{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ;v \vio{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ;a \href{}{<++>}<Space><++><Esc>2T{i
	autocmd FileType tex inoremap ;sc \textsc{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ;chap \chapter{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ;sec \section{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ;ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ;sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ;st <Esc>F{i*<Esc>f}i
	autocmd FileType tex inoremap ;beg \begin{DELRN}<Enter><++><Enter>\end{DELRN}<Enter><Enter><++><Esc>4k0fR:MultipleCursorsFind<Space>DELRN<Enter>c
	autocmd FileType tex inoremap ;up <Esc>/usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex nnoremap ;up /usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex inoremap ;tt \texttt{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ;bt {\blindtext}
	autocmd FileType tex inoremap ;nu $\varnothing$
	autocmd FileType tex inoremap ;col \begin{columns}[T]<Enter>\begin{column}{.5\textwidth}<Enter><Enter>\end{column}<Enter>\begin{column}{.5\textwidth}<Enter><++><Enter>\end{column}<Enter>\end{columns}<Esc>5kA
	autocmd FileType tex inoremap ;rn (\ref{})<++><Esc>F}i

"""LATEX Logical symbols
	autocmd FileType tex inoremap ;m $$<Space><++><Esc>2T$i
	autocmd FileType tex inoremap ;M $$$$<Enter><Enter><++><Esc>2k$hi
	autocmd FileType tex inoremap ;neg {\neg}
	autocmd FileType tex inoremap ;V {\vee}
	autocmd FileType tex inoremap ;or {\vee}
	autocmd FileType tex inoremap ;L {\wedge}
	autocmd FileType tex inoremap ;and {\wedge}
	autocmd FileType tex inoremap ;ra {\rightarrow}
	autocmd FileType tex inoremap ;la {\leftarrow}
	autocmd FileType tex inoremap ;lra {\leftrightarrow}
	autocmd FileType tex inoremap ;fa {\forall}
	autocmd FileType tex inoremap ;ex {\exists}
	autocmd FileType tex inoremap ;dia	{\Diamond}
	autocmd FileType tex inoremap ;box	{\Box}
	autocmd FileType tex inoremap ;gt	{\textgreater}
	autocmd FileType tex inoremap ;lt	{\textless}
"""LaTeX Linguistics Shortcuts
	autocmd Filetype tex inoremap ;nom {\textsc{nom}}
	autocmd FileType tex inoremap ;acc {\textsc{acc}}
	autocmd FileType tex inoremap ;dat {\textsc{dat}}
	autocmd FileType tex inoremap ;gen {\textsc{gen}}
	autocmd FileType tex inoremap ;abl {\textsc{abl}}
	autocmd FileType tex inoremap ;voc {\textsc{voc}}
	autocmd FileType tex inoremap ;loc {\textsc{loc}}
	autocmd Filetype tex inoremap ;inst {\textsc{inst}}
	autocmd FileType tex inoremap ;tipa \textipa{}<Space><++><Esc>T{i

"java
autocmd Filetype java imap sysout System.out.println(z); <esc>Fzs
autocmd Filetype java imap scanner import java.util.Scanner;
autocmd Filetype java imap AIOFB ArrayIndexOutOfBound
autocmd Filetype java imap try try<Space>{<Enter>z<Enter>}catch(<Space><++><Space>){<Enter><++><Enter>} <esc>3kfzs
autocmd Filetype java imap EXP Exception<Space>e <esc>

"html,php

autocmd Filetype html,php imap ;H <html><Enter>z<Enter></html> <esc>1kzs
autocmd Filetype html,php imap ;ssrc <script src="z"></script><Enter><++> <esc>1kfzs
autocmd Filetype html,php imap ;s <script>z</script><Enter><++> <esc>1kfzs
autocmd Filetype html,php imap ;p <p>z</p> <++><esc>Fzs 
autocmd Filetype html,php imap ;t <title><Enter>z<Enter></title><Enter><++> <esc>2ks
autocmd Filetype html,php imap ;h <head><Enter>z<Enter></head><Enter><++><esc>2ks
autocmd FileType html,php imap ;img < img src=z height=<++> width=<++> > <esc>Fzs
autocmd FileType html,php imap ;h1 <h1> z </h3><++> <esc>Fzs 
autocmd FileType html,php imap ;h2 <h2> z </h2><++> <esc>Fzs 
autocmd FileType html,php imap ;h3 <h3> z </h3><++> <esc>Fzs 
autocmd FileType html,php imap ;h4 <h4> z </h4><++> <esc>Fzs 
autocmd FileType html,php imap ;h5 <h5> z </h5><++> <esc>Fzs 
autocmd FileType html,php imap ;h6 <h6> z </h6><++> <esc>Fzs 
autocmd FileType html,php imap ;php <?php<Enter> z<Enter> ?><Enter><++> <esc>2kfzs
autocmd FileType html,php imap ;a <a<Space>href=""><++></a><Space><++> <Esc>F"i

"Python 
autocmd Filetype python imap <F5> <Esc>:w<CR>:!clear;python %<CR>
autocmd Filetype python nmap <F5> <Esc>:w<CR>:!clear;python %<CR>
autocmd Filetype python imap ;im from z import <++> <esc>Fzs
autocmd Filetype python imap ;nm if __name__ == '__main__':<Enter>

"C/C++
autocmd Filetype C imap <F9> <Esc>:w<CR>:!clear;gcc % && ./a.out<CR>


colorscheme	Benokai
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set hlsearch      " highlight matches
set autowrite     " Automatically :write before running commands
set cursorline

au BufWinLeave * mkview
au BufWinLeave * silent loadview

set list!
set listchars=eol:⏎,tab:--,trail:.,extends:\#,nbsp:⎵

" Light 80 column ruler for non-intrusive visual guide for format
if exists('+colorcolumn')
   set colorcolumn=90
endif
